{"version":3,"sources":["Components/Square.js","Components/Board.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","square","renderSquare","Component","calculateWinner","lines","length","a","b","c","Game","state","xIsNext","stepNumber","history","Array","fill","step","setState","slice","squares","winner","console","log","concat","status","current","moves","map","move","desc","key","jumpTo","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAEe,SAASA,EAAOC,GAE9B,OACC,4BAAQC,UAAU,SAASC,QAASF,EAAME,SAAUF,EAAMG,O,ICFvCC,E,2KACPC,GAAG,IAAD,OACd,OAAO,kBAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,OAAOF,GAAIH,QAAS,kBAAI,EAAKF,MAAME,QAAQG,Q,+BAG5E,OACA,6BACC,yBAAKJ,UAAU,cACbK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAGpB,yBAAKP,UAAU,cACbK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAGpB,yBAAKP,UAAU,cACbK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GAtBYC,aCAnC,SAASC,EAAgBH,GAWxB,IAVA,IAAMI,EAAQ,CACb,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAEEN,EAAE,EAAEA,EAAEM,EAAMC,OAAOP,IAAI,CAAC,IAAD,cAChBM,EAAMN,GADU,GACvBQ,EADuB,KACrBC,EADqB,KACnBC,EADmB,KAE9B,GAAGR,EAAOM,IAAON,EAAOM,KAAON,EAAOO,IAAMP,EAAOO,KAAKP,EAAOQ,GAC9D,OAAOR,EAAOM,I,IAIIG,E,kDACpB,WAAYhB,GAAO,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACZC,SAAS,EACTC,WAAY,EACZC,QAAQ,CACR,CAACb,OAAOc,MAAM,GAAGC,KAAK,SANN,E,mDAUXC,GACNjB,KAAKkB,SACL,CAACL,WAAWI,EACZL,QAASK,EAAK,IAAK,M,kCAGRlB,GACX,IAAMe,EAAUd,KAAKW,MAAMG,QAAQK,MAAM,EAAEnB,KAAKW,MAAME,WAAW,GAE3DO,EADUN,EAAQA,EAAQR,OAAQ,GAChBL,OAAOkB,QACzBE,EAASjB,EAAgBgB,GAC5BC,GAAUD,EAAQrB,GACpBuB,QAAQC,IAAI,SAASF,IAGtBD,EAAQrB,GAAKC,KAAKW,MAAMC,QAAQ,IAAI,IACpCZ,KAAKkB,SAAS,CACbN,SAAWZ,KAAKW,MAAMC,QACtBE,QAAQA,EAAQU,OAAO,CAACvB,OAAOmB,IAE/BP,WAAaC,EAAQR,Y,+BAGd,IAcLmB,EAdI,OACFX,EAAUd,KAAKW,MAAMG,QACrBY,EAAUZ,EAAQd,KAAKW,MAAME,YAC7BQ,EAASjB,EAAgBsB,EAAQzB,QACjC0B,EAAQb,EAAQc,KAAI,SAACX,EAAKY,GAC/B,IAAMC,EAAOD,EAAK,UAAUA,EAAK,iBAEjC,OACC,wBAAIE,IAAKF,GACR,4BAAQjC,QAAS,WAAK,EAAKoC,OAAOH,KAASC,EAA3C,SAYF,OALAL,EADEJ,EACO,YAAaA,EAGb,mBAAqBrB,KAAKW,MAAMC,QAAQ,IAAI,KAGrD,yBAAKjB,UAAU,QACd,yBAAKA,UAAU,cACd,kBAAC,EAAD,CAAOC,QAAS,SAACG,GAAD,OAAK,EAAKkC,YAAYlC,IAAIE,OAAQyB,EAAQzB,UAE3D,yBAAKN,UAAU,aACd,6BAAM8B,GACN,4BAAKE,S,GA9DyBxB,aCVnB+B,MARf,WACE,OACE,yBAAKvC,UAAU,cACf,kBAAC,EAAD,QCMgBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.33022e2d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Square(props){\n\n\treturn (\n\t\t<button className=\"square\" onClick={props.onClick}>{props.value}</button>\n\t)\n}\n","import React, {Component} from 'react';\nimport Square from './Square'\n\nexport default class Board extends Component{\n\trenderSquare(i){\n\t\treturn <Square value={this.props.square[i]} onClick={()=>this.props.onClick(i)} />\n\t}\n\trender(){\n\t\treturn(\n\t\t<div>\n\t\t\t<div className=\"border-row\">\n\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t{this.renderSquare(2)}\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className=\"border-row\">\n\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t{this.renderSquare(5)}\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className=\"border-row\">\n\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t{this.renderSquare(8)}\n\t\t\t</div>\n\t\t\t\n\t\t</div>\n\t\t)\n\t}\n}\n","import React, {Component} from 'react';\nimport Board from './Board';\n\nfunction calculateWinner(square){\n\tconst lines = [\n\t\t[0,1,2],\n\t\t[3,4,5],\n\t\t[6,7,8],\n\t\t[0,3,6],\n\t\t[1,4,7],\n\t\t[2,5,8],\n\t\t[0,4,8],\n\t\t[2,4,6]\n\t];\n\tfor(let i=0;i<lines.length;i++){\n\t\tconst [a,b,c]=lines[i];\n\t\tif(square[a]  && square[a] === square[b] && square[b]===square[c]){\n\t\t\treturn square[a];\n\t\t}\n\t}\n}\nexport default class Game extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\txIsNext: true,\n\t\t\tstepNumber: 0,\n\t\t\thistory:[\n\t\t\t{square:Array(9).fill(null)}\n\t\t\t]\n\t\t}\n\t}\n\tjumpTo(step){\n\t\tthis.setState(\n\t\t{stepNumber:step,\n\t\txIsNext:(step%2)===0}\n\t\t)\n\t}\n\thandleClick(i){\n\t\tconst history = this.state.history.slice(0,this.state.stepNumber+1);\n\t\tconst current = history[history.length -1];\n\t\tconst squares = current.square.slice();\n\t\tconst winner = calculateWinner(squares);\n\t\tif(winner || squares[i]){\n\t\t\tconsole.log(\"winner\"+winner);\n\t\t\treturn ;\n\t\t}\n\t\tsquares[i] = this.state.xIsNext?'X':'O';\n\t\tthis.setState({\n\t\t\txIsNext : !this.state.xIsNext,\n\t\t\thistory:history.concat({square:squares}),\n\t\t\t\n\t\t\tstepNumber : history.length\n\t\t})\n\t}\n\trender(){\n\tconst history = this.state.history;\n\tconst current = history[this.state.stepNumber];\n\tconst winner = calculateWinner(current.square);\n\tconst moves = history.map((step,move)=>{\n\t\tconst desc = move?'Go to #'+move:\"Start the Game\";\n\t\t\n\t\treturn (\n\t\t\t<li key={move}>\n\t\t\t\t<button onClick={()=>{this.jumpTo(move)}}>{desc}></button>\n\t\t\t\t\n\t\t\t</li>\n\t\t)\n\t});\n\tlet status;\n\tif(winner){\n\t\tstatus = 'Winner is'+ winner;\n\t}\n\telse{\n\t\tstatus = \"Next Player is \" + (this.state.xIsNext?'X':'O'); \n\t}\n\t\treturn(\n\t\t<div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board onClick={(i)=>this.handleClick(i)} square={current.square}/>\n\t\t\t</div>\n\t\t\t<div className=\"game-info\">\n\t\t\t\t<div>{status}</div>\n\t\t\t\t<ul>{moves}</ul>\n\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n","import React from 'react';\nimport './App.css';\nimport Game from './Components/Game';\nfunction App() {\n  return (\n    <div className=\"background\"  >\n    <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}